import e from"@tencentcloud/chat";import t from"tim-upload-plugin";import n from"tim-profanity-filter-plugin";class i{constructor(){this.serviceMap=new Map}registerService(e,t){this.serviceMap.has(e)||(console.log(`TUIServiceManager.registerService serviceName:${e}`),this.serviceMap.set(e,t))}unregisterService(e){this.serviceMap.has(e)&&(console.log(`TUIServiceManager.unregisterService serviceName:${e}`),this.serviceMap.delete(e))}getService(e){return this.serviceMap.get(e)}callService(e){const{serviceName:t,method:n,params:i,callback:s}=e,r=this.getService(t);if(console.log(`TUIServiceManager.callService serviceName:${t}, service:`,r),r)return r.onCall(n,i,s)}}class s{constructor(){this.extensionMap=new Map}registerExtension(e,t){if(console.log(`TUIExtensionManager.registerExtension extensionID:${e}`),!this.extensionMap.has(e)){const t=[];this.extensionMap.set(e,t)}const n=this.extensionMap.get(e);-1===n.indexOf(t)&&n.push(t)}unregisterExtension(e,t){if(console.log(`TUIExtensionManager.unregisterExtension extensionID:${e}`),this.extensionMap.has(e)){const n=this.extensionMap.get(e),i=n.indexOf(t);i>-1&&n.splice(i,1)}}getExtensionList(e,t){console.log(`TUIExtensionManager.getExtensionList extensionID:${e}, params:${t?JSON.stringify(t):void 0}`);let n=[],i=[];if(this.extensionMap.has(e)){n=this.extensionMap.get(e);for(let s=0;s<n.length;s++){let r=n[s].onGetExtension(e,t);i=i.concat(r)}}return i}}class r{constructor(){this.eventMap=new Map}registerEvent(e,t,n){const i=this.getKey(e,t);if(console.log(`TUIEventManager.registerEvent eventName:${e} subKey:${t}`),!this.eventMap.has(i)){const e=[];this.eventMap.set(i,e)}const s=this.eventMap.get(i);-1===s.indexOf(n)&&s.push(n)}unregisterEvent(e,t,n){console.log(`TUIEventManager.unregisterEvent eventName:${e} subKey:${t}`);const i=this.getKey(e,t);if(this.eventMap.has(i)){const e=this.eventMap.get(i),t=e.indexOf(n);t>-1&&e.splice(t,1)}}notifyEvent(e,t,n){const i=this.getKey(e,t);if(console.log(`TUIEventManager.notifyEvent eventName:${e} subKey:${t} params:${JSON.stringify(n)}`),this.eventMap.has(i)){this.eventMap.get(i).forEach((i=>{i.onNotifyEvent(e,t,n)}))}}getKey(e,t){let n=e;return t&&(n=`${e}-${n}`),n}}class o{constructor(){this.serviceManager=new i,this.extensionManager=new s,this.eventManager=new r}static getInstance(){return o.instance||(console.log("TUICore.getInstance ok."),o.instance=new o),o.instance}registerService(e,t){return this.serviceManager.registerService(e,t)}unregisterService(e){return this.serviceManager.unregisterService(e)}getService(e){return this.serviceManager.getService(e)}callService(e){return this.serviceManager.callService(e)}registerExtension(e,t){return this.extensionManager.registerExtension(e,t)}unregisterExtension(e,t){return this.extensionManager.unregisterExtension(e,t)}getExtensionList(e,t){return this.extensionManager.getExtensionList(e,t)}registerEvent(e,t,n){return this.eventManager.registerEvent(e,t,n)}unregisterEvent(e,t,n){return this.eventManager.unregisterEvent(e,t,n)}notifyEvent(e,t,n){return this.eventManager.notifyEvent(e,t,n)}}const a=["vue2","vue3"],g={TUILogin:{EVENT:{LOGIN_STATE_CHANGED:"loginStateChanged"},EVENT_SUB_KEY:{USER_LOGIN_SUCCESS:"userLoginSuccess",USER_LOGOUT_SUCCESS:"userLogoutSuccess",USER_KICKED_OFFLINE:"userKickedOffline",USER_SIG_EXPIRED:"userSigExpired"}},TUIConversation:{SERVICE:{NAME:"TUIConversationService",METHOD:{}},EXTENSION:{CONV_POP_MENU:{EXT_ID:"conversationPopMenu"},CONV_GROUP:{EXT_ID:"conversationGroup"}}},TUIChat:{SERVICE:{NAME:"TUIChatService",METHOD:{UPDATE_MESSAGE_LIST:"updateMessageList"}},EXTENSION:{INPUT_MORE:{EXT_ID:"inputToolBarMore"},MSG_POP_MENU:{EXT_ID:"messagePopMenu"}}},TUIGroup:{SERVICE:{NAME:"TUIGroupService",METHOD:{}}},TUIContact:{SERVICE:{NAME:"TUIContactService",METHOD:{}}},TUISearch:{SERVICE:{NAME:"TUISearchService",METHOD:{}}},TUICalling:{SERVICE:{NAME:"TUICallingService",METHOD:{START_CALL:"startCall"}}}},E="undefined"!=typeof wx&&"function"==typeof wx.getSystemInfoSync&&Boolean(wx.getSystemInfoSync().fontSizeSetting),c="undefined"!=typeof uni&&"undefined"==typeof window,h=E||c,S="undefined"!=typeof uni,u=("undefined"!=typeof uni||"undefined"!=typeof window)&&!h;E?wx:S?uni:window;const l=u&&window&&window.navigator&&window.navigator.userAgent||"",I=/Android/i.test(l),v=/(?:Windows Phone)/.test(l),T=/(?:SymbianOS)/.test(l),p=/iPad/i.test(l)||/iPhone/i.test(l)||/iPod/i.test(l),U=I||v||T||p,M=u&&!U,f=c&&!E;class N{constructor(){this.loginStatusPromise=new Map,this.SDKAppID=0,this.userID="",this.userSig=""}static getInstance(){return N.instance||(N.instance=new N),N.instance}login(t){const{SDKAppID:n,userID:i,userSig:s,framework:r}=t;return this.chat=e.create(Object.assign(Object.assign({},t),{scene:this.getStatScene(r)})),this.EVENT=e.EVENT,this.TYPES=e.TYPES,this.SDKAppID=n,this.userID=i,this.userSig=s,this.onChatEvent(),this.registerPlugin(t),this.loginChat(t)}logout(){return this.chat.logout().then((e=>(o.getInstance().notifyEvent(g.TUILogin.EVENT.LOGIN_STATE_CHANGED,g.TUILogin.EVENT_SUB_KEY.USER_LOGOUT_SUCCESS),Promise.resolve(e))))}destroy(){return this.chat.destroy().then((e=>(o.getInstance().notifyEvent(g.TUILogin.EVENT.LOGIN_STATE_CHANGED,g.TUILogin.EVENT_SUB_KEY.USER_LOGOUT_SUCCESS),Promise.resolve(e))))}setLogLevel(e){return this.chat.setLogLevel(e)}getContext(){return{chat:this.chat,SDKAppID:this.SDKAppID,userID:this.userID,userSig:this.userSig}}loginChat(e){const{userID:t,userSig:n}=e;return new Promise(((e,i)=>{this.chat.login({userID:t,userSig:n}).then((t=>{t.data.repeatLogin&&this.chat.isReady()&&e(t),this.loginStatusPromise.set("login",{resolve:e,reject:i,imResponse:t})})).catch((e=>{i(e)}))}))}onChatEvent(){this.chat.on(this.EVENT.SDK_READY,this.onSDKReady,this),this.chat.on(this.EVENT.SDK_NOT_READY,this.onSDKNotReady,this),this.chat.on(this.EVENT.KICKED_OUT,this.onUserKicked,this)}onSDKReady(){if(this.loginStatusPromise.has("login")){const e=this.loginStatusPromise.get("login");e.resolve(e.imResponse),o.getInstance().notifyEvent(g.TUILogin.EVENT.LOGIN_STATE_CHANGED,g.TUILogin.EVENT_SUB_KEY.USER_LOGIN_SUCCESS)}this.loginStatusPromise.delete("login")}onSDKNotReady(){if(this.loginStatusPromise.has("login")){this.loginStatusPromise.get("login").reject(new Error("sdk not ready"))}this.loginStatusPromise.delete("login")}onUserKicked(e){e.data.type!==this.TYPES.KICKED_OUT_USERSIG_EXPIRED?o.getInstance().notifyEvent(g.TUILogin.EVENT.LOGIN_STATE_CHANGED,g.TUILogin.EVENT_SUB_KEY.USER_KICKED_OFFLINE):o.getInstance().notifyEvent(g.TUILogin.EVENT.LOGIN_STATE_CHANGED,g.TUILogin.EVENT_SUB_KEY.USER_SIG_EXPIRED)}registerPlugin(e){const{useUploadPlugin:i=!1,useProfanityFilterPlugin:s=!1,TUIOfflinePush:r,offlinePushConfig:o}=e;!0===i&&this.chat.registerPlugin({"tim-upload-plugin":t}),!0===s&&this.chat.registerPlugin({"tim-profanity-filter-plugin":n}),f&&r&&o&&this.chat.registerPlugin({"tim-offline-push-plugin":r,offlinePushConfig:o})}getStatScene(e){let t;return e&&a.indexOf(e)>-1&&(t=this.genStatScene(e)),t}genStatScene(e){let t="";return S?(M&&(t=`k-${e}-pc-uni`),U&&(t=`k-${e}-h5-uni`),f&&(t=`k-${e}-app-uni`),E&&(t=`k-${e}-mp-uni`),t):(M&&(t=`k-${e}-pc`),U&&(t=`k-${e}-h5`),t)}}console.log("TUICore.VERSION:0.0.3");const _=o.getInstance(),d=N.getInstance();export{g as TUIConstants,d as TUILogin,_ as default};
