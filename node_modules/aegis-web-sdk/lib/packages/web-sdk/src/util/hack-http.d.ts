import { TraceRequestHeader } from './trace';
export interface HackXHROptions {
    name: string;
    open?: (xhr: XMLHttpRequest) => void;
    send?: (xhr: XMLHttpRequest, body: any) => void;
}
export declare const hackXHR: (options: HackXHROptions) => void;
export declare const unHackXHR: (options: HackXHROptions) => void;
export interface HackFetchOptions {
    name: string;
    traceRequestHeader?: TraceRequestHeader;
    beforeFetch?: (url: string, option: RequestInit) => void;
    then?: (res: Response, duration: number, url: string, option?: RequestInit, headers?: HeadersInit) => void;
    catch?: (err: any, duration: number, url: string, option?: RequestInit, headers?: HeadersInit) => void;
}
export declare const hackFetch: (options: HackFetchOptions) => void;
export declare const unHackFetch: (options: HackFetchOptions) => void;
export declare const responseHeadersString2Obj: (allResponseHeaders: string) => Record<string, string>;
export declare const getRequestHeaders: (headers: HeadersInit | undefined, reqHeaders: string[], tag: string) => string;
