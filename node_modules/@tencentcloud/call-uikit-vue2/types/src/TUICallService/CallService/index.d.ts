import { ITUICallService, ICallParams, IGroupCallParams, ICallbackParam, ISelfInfoParams } from '../interface/ICallService';
import { LanguageType, LOG_LEVEL, VideoDisplayMode, VideoResolution } from '../const';
export default class TUICallService implements ITUICallService {
    static instance: TUICallService;
    _tuiCallEngine: any;
    private _tim;
    private _TUICore;
    private _timerId;
    private _callingBell;
    private _bellFilePath;
    constructor();
    static getInstance(): TUICallService;
    init(params?: any): Promise<void>;
    destroyed(): Promise<void>;
    call(callParams: ICallParams): Promise<void>;
    groupCall(groupCallParams: IGroupCallParams): Promise<void>;
    inviteUser(params: any): Promise<void>;
    joinInGroupCall(params: any): Promise<void>;
    setLogLevel(level: LOG_LEVEL): void;
    setLanguage(language: LanguageType): void;
    setSelfInfo(params: ISelfInfoParams): Promise<void>;
    enableAIVoice(enable: boolean): Promise<void>;
    accept(): Promise<void>;
    hangup(): Promise<void>;
    reject(): Promise<void>;
    openCamera(videoViewDomID: string): Promise<void>;
    closeCamera(): Promise<void>;
    openMicrophone(): Promise<void>;
    closeMicrophone(): Promise<void>;
    switchCallMediaType(): Promise<void>;
    getTim(): any;
    setCallingBell(filePath?: string): Promise<void>;
    private _addListenTuiCallEngineEvent;
    private _removeListenTuiCallEngineEvent;
    private _handleError;
    private _handleNewInvitationReceived;
    private _handleUserAccept;
    private _handleUserEnter;
    private _callerChangeToConnected;
    private _handleUserLeave;
    private _unNormalEventsManager;
    private _handleInviteeReject;
    private _handleNoResponse;
    private _handleLineBusy;
    private _handleCallingCancel;
    private _handleCallingEnd;
    private _handleSDKReady;
    private _handleKickedOut;
    private _handleCallTypeChange;
    private _handleUserVideoAvailable;
    private _handleUserAudioAvailable;
    private _messageSentByMe;
    private _handleUserVoiceVolume;
    beforeCalling: ((...args: any[]) => void) | undefined;
    afterCalling: ((...args: any[]) => void) | undefined;
    onMinimized: ((...args: any[]) => void) | undefined;
    onMessageSentByMe: ((...args: any[]) => void) | undefined;
    kickedOut: ((...args: any[]) => void) | undefined;
    statusChanged: ((...args: any[]) => void) | undefined;
    setCallback(params: ICallbackParam): void;
    toggleMinimize(): void;
    private _executeExternalBeforeCalling;
    private _executeExternalAfterCalling;
    setVideoDisplayMode(displayMode: VideoDisplayMode): void;
    setVideoResolution(resolution: VideoResolution): Promise<void>;
    private _startRemoteView;
    private _getMyProfile;
    private _getRemoteUserProfile;
    private _setLocalUserInfoAudioVideoAvailable;
    private _setRemoteUserInfoAudioVideoAvailable;
    private _updateCallStoreBeforeCall;
    private _updateCallStoreAfterCall;
    private _generateText;
    private _generateStatusChangeText;
    private _resetCallStore;
    private _noDevicePermissionToast;
    private _startTimer;
    private _updateCallDuration;
    private _stopTimer;
    private _deleteRemoteUser;
    private _handleCallStatusChange;
    private _watchTUIStore;
    private _unwatchTUIStore;
    private _callTUIService;
    bindTUICore(TUICore: any): void;
    onNotifyEvent(eventName: string, subKey: string): Promise<void>;
    onCall(method: String, params: any): Promise<void>;
    onGetExtension(extensionID: string, params: any): any[];
}
