import Core, { Config, SendOption, SendSuccess, SendFail, SpeedLog } from "../../core/src";
export interface WeexConfig extends Config {
    reportApiSpeed?: boolean;
    beforeReportSpeed?: Function;
    offlineLogLimit?: number;
    referrer?: string;
    offlineLog?: boolean;
    dbConfig?: any;
    offlineLogExp?: number;
    reqCallback?: (data?: unknown, options?: unknown) => {};
}
export default class Aegis extends Core {
    static sessionID: string;
    weex: any;
    originRequest: (url: string, options?: object) => Promise<unknown>;
    fetch: (url: string, options?: object) => Promise<unknown>;
    weexFetch: any;
    speedLogPipeline: import("../../core/src").Pipeline<any, any>;
    constructor(config: WeexConfig);
    getPlatform(): 1 | 2 | 100;
    initOfflineLog(): void;
    get getBean(): string;
    reportSpeed(logs: SpeedLog | SpeedLog[]): void;
    /**
     * @desc 上报测速
     * @param msg 测速日志log
     */
    retcode(msg: SpeedLog): void;
    request: (options: SendOption, success?: SendSuccess | undefined, fail?: SendFail | undefined) => void;
    uploadLogs(params?: any, conds?: any): void;
    /**
     * @description 读取离线日志，在offlineLogPlugin中会重写改方法
     */
    getOfflineLog(): void;
    /**
     * @description 上报离线日志，在offlineLogPlugin中会重写改方法
     * @param logs 日志
     */
    uploadOfflineLogs(_logs: any | any[]): void;
    private getCurrentPageUrl;
}
