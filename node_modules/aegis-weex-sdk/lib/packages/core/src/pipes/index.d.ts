export { createRandomSamplePipe } from './sample';
export { createWriteReportPipe } from './write-before';
export { createThrottlePipe } from './throttle';
export { formatNormalLogPipe } from './format';
export { createLimitLengthPipe } from './length-limit';
export { createWhitelistPipe } from './whitelist';
export { createPvPipe } from './pv';
export { createSpeedRepeatLimitPipe, createErrorLogLimitPipe } from './repeat-limit';
export { reportPipe, reportEventPipe, reportCustomPipe } from './report';
export { beforeRequestHooks } from './beforeRequestHooks';
export { modifyRequestHooks } from './modifyRequestHooks';
export { afterRequestHooks } from './afterRequestHooks';
export declare type Pipe<M = any, N = any> = (msg: M, resolve: Resolve<N>) => void;
export declare type Resolve<M> = (msg: M) => void;
export declare type Pipeline<M = any, N = any> = (msg: M, end?: Resolve<N>) => any;
export declare const createPipeline: (pipeArr: Pipe[]) => Pipeline;
